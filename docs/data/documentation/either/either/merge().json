{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"merge"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"A"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value result of the "},{"code":"merge","type":"codeVoice"},{"type":"text","text":" operation."}]}],"kind":"content"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most close Swift’s implementation based on Scala’s "},{"type":"codeVoice","code":"MergeableEither[A]"},{"type":"text","text":" constructor, would be when left and right hand sides are of the same type."},{"type":"text","text":" "},{"type":"text","text":"This means that "},{"type":"codeVoice","code":"Either<E, A>"},{"type":"text","text":" is implicitely equals than "},{"type":"codeVoice","code":"Either<A, A>"},{"type":"text","text":"."}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/either\/either\/merge()"]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Either\/documentation\/Either\/Either\/merge()"},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"It allows a ","type":"text"},{"type":"codeVoice","code":"merge"},{"text":" operation when both sides are of the same type.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Either\/documentation\/Either","doc:\/\/Either\/documentation\/Either\/Either"]]},"metadata":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"E","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"A","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"modules":[{"name":"Either"}],"role":"symbol","symbolKind":"method","title":"merge()","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"merge","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"A"}],"externalID":"s:6EitherAAOAAq_RszrlE5mergexyF","extendedModule":"Either"},"references":{"doc://Either/documentation/Either":{"url":"\/documentation\/either","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/Either\/documentation\/Either","title":"Either","abstract":[]},"doc://Either/documentation/Either/Either/merge()":{"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"E","type":"codeVoice"},{"type":"text","text":" is "},{"code":"A","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","role":"symbol","identifier":"doc:\/\/Either\/documentation\/Either\/Either\/merge()","title":"merge()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"merge","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"A"}],"url":"\/documentation\/either\/either\/merge()","abstract":[{"text":"It allows a ","type":"text"},{"type":"codeVoice","code":"merge"},{"text":" operation when both sides are of the same type.","type":"text"}]},"doc://Either/documentation/Either/Either":{"url":"\/documentation\/either\/either","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"Either","kind":"identifier"}],"navigatorTitle":[{"text":"Either","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Either\/documentation\/Either\/Either","title":"Either","abstract":[{"code":"Either","type":"codeVoice"},{"type":"text","text":" represents a value of one of two possible types (a disjoint union). An instance of "},{"code":"Either","type":"codeVoice"},{"type":"text","text":" is an instance of either "},{"code":"left","type":"codeVoice"},{"type":"text","text":" or "},{"code":"right","type":"codeVoice"},{"type":"text","text":"."}]}}}